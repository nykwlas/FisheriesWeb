{"ast":null,"code":"import _classCallCheck from\"/home/nicolas/FisheriesWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/nicolas/FisheriesWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/home/nicolas/FisheriesWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/nicolas/FisheriesWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import{withRouter}from'react-router-dom';import{connect}from'react-redux';import{compose}from'recompose';import{withFirebase}from'../Firebase';import*as ROUTES from'../../constants/routes';var withAuthorization=function withAuthorization(condition){return function(Component){var WithAuthorization=/*#__PURE__*/function(_React$Component){_inherits(WithAuthorization,_React$Component);var _super=_createSuper(WithAuthorization);function WithAuthorization(){_classCallCheck(this,WithAuthorization);return _super.apply(this,arguments);}_createClass(WithAuthorization,[{key:\"componentDidMount\",value:function componentDidMount(){var _this=this;this.listener=this.props.firebase.onAuthUserListener(function(authUser){if(!condition(authUser)){_this.props.history.push(ROUTES.SIGN_IN);}},function(){return _this.props.history.push(ROUTES.SIGN_IN);});}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this.listener();}},{key:\"render\",value:function render(){return condition(this.props.authUser)?/*#__PURE__*/React.createElement(Component,this.props):null;}}]);return WithAuthorization;}(React.Component);var mapStateToProps=function mapStateToProps(state){return{authUser:state.sessionState.authUser};};return compose(withRouter,withFirebase,connect(mapStateToProps))(WithAuthorization);};};export default withAuthorization;","map":{"version":3,"sources":["/home/nicolas/FisheriesWeb/src/components/Session/withAuthorization.js"],"names":["React","withRouter","connect","compose","withFirebase","ROUTES","withAuthorization","condition","Component","WithAuthorization","listener","props","firebase","onAuthUserListener","authUser","history","push","SIGN_IN","mapStateToProps","state","sessionState"],"mappings":"ojBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,UAAT,KAA2B,kBAA3B,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,OAASC,OAAT,KAAwB,WAAxB,CAEA,OAASC,YAAT,KAA6B,aAA7B,CACA,MAAO,GAAKC,CAAAA,MAAZ,KAAwB,wBAAxB,CAEA,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAAAC,SAAS,QAAI,UAAAC,SAAS,CAAI,IAC5CC,CAAAA,iBAD4C,uUAE5B,gBAClB,KAAKC,QAAL,CAAgB,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,kBAApB,CACd,SAAAC,QAAQ,CAAI,CACV,GAAI,CAACP,SAAS,CAACO,QAAD,CAAd,CAA0B,CACxB,KAAI,CAACH,KAAL,CAAWI,OAAX,CAAmBC,IAAnB,CAAwBX,MAAM,CAACY,OAA/B,EACD,CACF,CALa,CAMd,iBAAM,CAAA,KAAI,CAACN,KAAL,CAAWI,OAAX,CAAmBC,IAAnB,CAAwBX,MAAM,CAACY,OAA/B,CAAN,EANc,CAAhB,CAQD,CAX+C,mEAazB,CACrB,KAAKP,QAAL,GACD,CAf+C,uCAiBvC,CACP,MAAOH,CAAAA,SAAS,CAAC,KAAKI,KAAL,CAAWG,QAAZ,CAAT,cACL,oBAAC,SAAD,CAAe,KAAKH,KAApB,CADK,CAEH,IAFJ,CAGD,CArB+C,+BAClBX,KAAK,CAACQ,SADY,EAwBlD,GAAMU,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAAAC,KAAK,QAAK,CAChCL,QAAQ,CAAEK,KAAK,CAACC,YAAN,CAAmBN,QADG,CAAL,EAA7B,CAIA,MAAOX,CAAAA,OAAO,CACZF,UADY,CAEZG,YAFY,CAGZF,OAAO,CAACgB,eAAD,CAHK,CAAP,CAILT,iBAJK,CAAP,CAKD,CAjCkC,EAAnC,CAmCA,cAAeH,CAAAA,iBAAf","sourcesContent":["import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { compose } from 'recompose';\n\nimport { withFirebase } from '../Firebase';\nimport * as ROUTES from '../../constants/routes';\n\nconst withAuthorization = condition => Component => {\n  class WithAuthorization extends React.Component {\n    componentDidMount() {\n      this.listener = this.props.firebase.onAuthUserListener(\n        authUser => {\n          if (!condition(authUser)) {\n            this.props.history.push(ROUTES.SIGN_IN);\n          }\n        },\n        () => this.props.history.push(ROUTES.SIGN_IN),\n      );\n    }\n\n    componentWillUnmount() {\n      this.listener();\n    }\n\n    render() {\n      return condition(this.props.authUser) ? (\n        <Component {...this.props} />\n      ) : null;\n    }\n  }\n\n  const mapStateToProps = state => ({\n    authUser: state.sessionState.authUser,\n  });\n\n  return compose(\n    withRouter,\n    withFirebase,\n    connect(mapStateToProps),\n  )(WithAuthorization);\n};\n\nexport default withAuthorization;\n"]},"metadata":{},"sourceType":"module"}